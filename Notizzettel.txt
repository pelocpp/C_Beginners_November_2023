============================

C für Einsteiger

Peter Loos / "Du"

Guten Morgen

============================

Wie gestalte ich diesen Kurs?

2 Tools:

a) Github

b) Visual Studio Version (2022)

============================

Pause:  10.30 .... ca.

12 und 13

14.45 

17 Uhr

============================

Übungen in den Nachmittag zu verschieben ...

Am nächsten Morgen zum Start (Musterlösung) besprechen ...

============================

i) Was bringe ich mit ??? // Python, C, Visual Basic

ii) Was erwarte ich von diesem Kurs?

== ich muss in der nächsten Woche in einem C-Projekt mitarbeiten
== Überblick
== Ich muss C-Quellcode von anderen lesen / verstehen können
== Interesse

>> 2. Chance

>> Englisch

Fühle mich wohler: 

Wie geht es euch ??? Langsamer, schneller, weiter so ... Feedback

>> Übungen ... 

"C kann man nicht lernen"  // C muss man praktizieren // doing

=================================================

Github Neu  // Account : wir machen das ohne // Lesend zugreifen

=================================================

"Hello World"

"Ein Programm erstellen"

Quelltext (Source Code) : Programm in (Human readable form) menschenlesbarer Form

Maschinenprogramm:   Programm für die CPU 

Quelltext ===> Maschinenprogramm:  Übersetzer (Compiler) // Programm

Wie sieht Quelltext aus ???

"Wie in Text in einer natürlichen Sprache"

C:  Grammatik ; Lexikon (welche Wörter); 

Was tut ein Programm  ?? Bedeutung: Semantik

===================================================

Quelltext:

2 AUFGABEN:

a) Grammatik !!!!

   ==> Rechte Maustaste auf dem Dateinamen: "Compile" / "Übersetzen"

b) Wir erzeugen ein Maschinenprogramm

   ==> Rechte Maustaste auf dem Projekt (!!!) "Build" / "Erzeugen"


Anmerkung: Wo ist es denn, das Maschinenprogramm :)

In einem Unterverzeichnis mit der Endung ".exe"  (Windows)



Achtung:

Dateiname muss mit .c enden !!!  ===> C-Compiler

Dateiname mit .cpp enden !!!     ===> C++-Compiler

a) C ist ein C++ enthalten (Teilmenge)  // zu 99%

b) Es ist nicht möglich (Ausnahmen ..), C und C++ zu mischen ...

c) Machmal sind die Fehlermeldungen unterschiedlich (C, C++)

// ============================

C ist eine format-freie Programmiersprache:

Beispiel: Python ist NICHT format-frei
( 4 Leerzeichen für einen Block )

// ============================

Was sind Datentypen // was sind Variablen ???

Variablen: 

"Variablen sind Dinge einer bestimmten Form"

Variablen stehen für ein oder mehrere Bytes Speicherplatz

Eine Variable (Name: Bezeichner) steht für Speicher !!!

NICHT: Ebene von Maschinensprachen:  Bits, Bytes ... 0 und 1

SONDERN: Ebene einer höheren Programiersprache :

Hier wird dem Speicherplatz eine "Interpretation" zugeordnet:

Speicherplatz ===> ganzen Zahl (123)
              ===> Kommazahl (99.99)
              ===> einzelnes Zeichen ('?', 'A')
              ===> mehrere Zeichen (Zeichenkette) ("ABC")

Interpretation ===> Begriff: Datentyp


Datentypen:

Ganze Zahl:          int           4 Bytes (auf den meisten Maschinen)
                     short         2 Bytes (per Definition)
                     long          4 Bytes oder 8 Bytes
                     long long     8
                     

Kommazahl:           float         4 Bytes
                     double        8 Bytes

einzelnes Zeichen:   char          1 Bytes

(( UNICODE))                       2 Bytes

Zeichenkette:        const char*

// Nebenbemerkung:

Fach:  Mikrocomputer - Programmierung.

Ganze Zahl:          int

Wieviele Bits / Bytes sind das denn im Speicher ?????

Bit:   0 oder 1

Byte:  8 Bits

Word:  16 Bits // 2 Bytes

Doppelwort:  32 Bits // 4 Bytes

Quad-Wort:   64 Bits // 8 Bytes


Antwort: int ==> 4 Bytes (32 Bit)

Beispiel:    Zahl 17  

Zahl 17 in Bits dargestellt ???  2-er Komplement

1 0001

Das 2-er System:

Von rechts:

2 hoch 0   == 1 ==> 1
2 hoch 1   == 0
2 hoch 2   == 0
2 hoch 3   == 0
2 hoch 4   == 1 ==> 16
----------------------
                    17


// ====================================

Ganze Zahlen:  "2-er Komplement"

Komma-Zahlen:  123.456  ==> IEEE - Format

4.5 ===> 01000000100100000000000000000000

// ====================================

    int n;  

    n steht für eine Variable,
    die im Speicher 4 Bytes belegt und ganze Zahlen
    aufnehmen kann.

    n steht "irgendwo" im Speicher

    Der Speicher wird prinzipiell vom Betriebssystem verwaltet.

    Eine Variable kann man

    == lesen

    == schreiben

    == lesen UND schreiben

    ================================

    Bei Gleitkommazahlen gibt es RUNDUNGSFEHLER // RUNDUNGS - UNGENAUIGEITEN:

    Beispiel:

    int n = 123;
    
    double x = 55.77;

    n = x;    // Geht das ??? 

              // Weil int und double sind VERSCHIEDENE Datentypen.


    Ja  - mit ABSCHNEIDEN / KEIN RUNDEN.

    n hat den Wert 55.

==========================================

Rechnen // Arithmetik:  mit ganzen Zahlen ODER mit Kommazahlen.

Vorsicht:  Weil in jedem Fall die Anzahl der Bytes pro Variable begrenz ist:

   Es kann zu Fehlern kommen :  an den GRENZEN


Konsequenz:

Sehr große Zahlen:  Überlauf

Zweites Problem:

Rundungsfehler: 

Frage: Euer Gehaltszettel // unser Sparkassenkonto:

Kontostand:   double  konto_stand; 

ABER: double geht auch nicht: Rundungsfehler ( 1000.- €  // 999.99999 ,. € )

Was ist es denn dann ????????

Da muss man EIGENE Datentypen schreiben:

== Currency: So etwas müsste man selbst schreiben ...

==========================================


Kontrollstrukturen:

Ablauf eines Programms:

Regel: Der Reihe nach // Anweisung für Anweisung // sequentiell

Davon gibt es Ausnahmen: Kontrollstrukturen.


Condition // Bedingung:

"ist ein Wert größer oder kleiner Null"

Ist etwas erfüllt oder nicht:  Ja, Nein:  

Ja Nein:   ist erfüllt:       true     1
Ja Nein:   ist nicht erfüllt: false    0

Condition: if - Anweisung

SYNTAX:

if ( bedingung )
{
}

Wenn eine Bedingung erfüllt ist, werden alle Anweisung
innerhalb der Klammern { und } ausgeführt.

Wenn eine Bedingung NICHT erfüllt ist, geht es mit
der ERSTEN Anweisung NACH der SCHLIESSENDEN Klammer } weiter.

==================================================

Ausführung eines Programms:

A) Laufen lassen

B) Mit Hilfe eines besonderen Tools:  Debugger.


   Was ist / kann der Debugger ???

   i) ein Programm

   ii) dieses Programm kann ein zweites Programm
       Schritt für Schritt ausführen

       Zeile für Zeile

       Geichzeitig kann man die Inhalte von Variablen
       anschauen

   iii) Unersetzlich für die Entwicklung eines Programms.

Magic Keys  // Magic Menus:

Einzelschritt == eine Zeile ausführen:  F10

Gehe zu Zeile XXX:   Haltepunkt (Breakpoint) setzen: F9

Erweiterung von 'if':

if - else:

SYNTAX:

if ( bedingung )
{
    // hier
}
else
{
    // oder
}


Zweite Erweiterung von 'if':

if - else if



==================================================

Operator:  

>   >=

<   <=

Gleichheit:    == 

Ungleichheit:  !=


Verknüfung von 2 Bedingungen:

Logisches Und:   &&    doppeltes Kaufmannsund // Ampersand
Logisches Oder:  ||    doppelter vertikaler Strich

======================================================

Jahr durch 4 teilbar

Lösung: Rest bei Division durch 4

jahr / 4    Ergebnis der Division

jahr % 4    Modulus: Rest bei der Division


======================================================

Kontrollstrukturen:

if: check.

Bedingung

-----------------------------------------------------


Wiederholung: 

== while

== for



Führe Anweisungen MEHRERE MAL aus.

Wie oft ??? Bedingung .

SYNTAX:

while ( bedingung ) 
{
    // anweisungen
}

Alle Anweisungen, die wiederholt ausgeführt werden,
stehen in dem Block  (alles zwischen {  und } ).

Vorsicht: Die bedingung ist "irgendwie" zu ändern,

damit es nicht zu einer Endlosscheife kommt.

==================================================

"Kontrollstrukturen lassen sich schachteln"

Beispiel:

Alle ungeraden Zahlen zwischen 1 und 20 ausgeben.

==> while - Wiederholungsanweisung.

    ==> Rumpf: if -Anweisung (ungerade).





