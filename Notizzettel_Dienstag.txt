============================

C für Einsteiger

Dienstag
--------

============================

Was machen wir heute ???

== Unterprogramme

== Was ist das main ???

== Aufteilung eines Programms auf mehrere Dateien

== Besprechung der Musterlösung

== Aufgaben ( mehrere, UNTERSCHIEDLICHE Level )

//  15.00 Uhr: Telefonat (15 Minuten)


============================

Begriff eines Unterprogramms:

Beobachtung: Ich habe eine Reihe von Anweisungen:

   Diese möchte an verschiedenen Stellen im Programm verwenden.

i)   Kopieren !!! 

     NACHTEILE:  Ich will in der Sequenz von Anweisungen eine Änderung vornehmen. Umständlich

     NACHTEIL: Es ist ein Fehler in dieser Sequenz ==> Der Fehler ist öfters im Programm vorhanden.


     Keine Lösung

ii)  Möglichkeit:

     Einer Sequenz von Anweisungen einen Namen geben ... und die Sequenz mit diesem Namen ausführen.

===================================================

Wer ist main:

a) main ist ein Unterprogramm:

  Der name 'main'  (kleingeschrieben !!!) ist RESERVIERT:

  Für das Betriebssytem: Im Maschinencode fängt das Programm an der Stelle von
  main an !!!!!!

===================================================

Struktur eines C-Programs:

== Ein C-Programm besteht aus MEHREREN C-Dateien

   .c - Dateien mit C-Quellode (Unterprogramm / globale Variablen)

   .h - Dateien mit Vorwärtsdeklarationen

== Mit 'extern'-Vorwärtsdeklarationen lassen sich Unterprogramme
   in verschiedenen C-Dateien ablegen und in einer anderen C-Datei aufrufen.

== Wer findet am Ende ein C-Unterprogramm in einer anderen Datei ???

a) C-Datei ===> Compiler ===> Ergebnis-Datei: "Object-File" (Maschinencode / Weitere Informationen)

   Neben dem Compiler: LINKER :   ===> "Object-File" (mehrere) ===> EINE .exe-Datei



d) Viele 'extern'-Vorwärtsdeklarationen legt man am besten in 
   einer separaten Datei an.

   Diese Datei enthält nur 'extern'-Vorwärtsdeklarationen --
   sie ist deshalb keine Datei mit C-Quellcode (C-Anweisungen)

   ==> Header-Datei:  Diese hat die Endung  .h  (h  ==> header)


Beispiel: error LNK2019:  LNK ==> Linker

===================================================

Unterprogramme:

Es gibt die Möglichkeit, Informationen einem 
Unterprogramm mitzugeben:

==> Parameter: Sind Daten / Werte für ein Unterprogramm

    Anderes Wort für Parameter: Stellvertreter

==> Wo stehen die Parameter: Innerhalb der runden Klammern ( )

==> Syntax: Datentyp Namen

    void myGoodMorning( int wieOft )

===================================================

Begriff: Schnittstelle eines Unterprogramms:

a) Der Name des Unterprogramms

b) Alle Parameter: Name und Typ

b1) Daraus folgt: Auch die Anzahl der Parameter zählt zur Schnittstelle

c) KOMMT NOCH: Der Rückgabetyp

===================================================

Unterprogramme:

i)   Welche, die ein Ergebnis berechnen

ii)  Welche, die kein Ergebnis berechnen

Nomenklatur:

Unterprogramm, Prozedur, Procedure, Function, Subfunction, Funktion

In den meisten Programmiersprachen:

i) Procedure: Unterprogramm ohne Ergebnis

   void myGoodMorning(int wieOft);

ii) Function: Unterprogramm mit Ergebnis


    Der Typ des Ergbnisses muss vor dem Namen der Funktion stehen !


    int malDrei(int wert);   // Rückgabetyp


Anmerkung:

In Prozeduren (also Unterprogramm ohne Ergebnis)
kann auch 'return' verwendet werden.

'return' ist eine Anweisung (Statement):

Mit return wird ein Unterprogramm verlassen.

Anmerkung: Das kann mit und ohne Wert sein.


===================================================


Unterprogrammen:

Es gibt "SORTEN / ARTEN" von Unterprogrammen:

i)   Welche, die ein Ergebnis berechnen

ii)  Welche, die kein Ergebnis berechnen

===================================================


"12312312312312312312312312213312" + "9999999999999999999999999999999999"

Dynamische Speicherverwaltung


===================================================

Vorgehensweise:

== Etwas neuer Stoff:  Felder

== Pause: 14.55 

== Üben:  Unterprogrammen  // Feld.

===================================================

== Kontrollstukturen

== Unterprogramme

== Feld / Array

===================================================

Feld:

Was ist ein Feld ???

int value; // ist EINE Variable

Ziehung der Lottozahlen:

==> 6 Zahlen.

int zahl1;
int zahl2;
int zahl3;
int zahl4;
int zahl5;
int zahl6;         // Ginge

We can do better:

Um mehrere Variablen desselben Typs (eg Lotto: 6 Numbers of type int),

kann man diese in einem sog. Feld ablegen:

Syntax:

    int name[6];   // 6 == Länge


    // Vorsicht:

// C99 -- Dialekt von C
int n = 100;  // Könnte auch von der Konsole eingelesen werden
int messreihe[n]; // LEIDER: NOOOOOOOOOOOOOOOOOOOOOOOOO


Nebenbei:  

for - Wiederholungsschleife:

3 Teile:

a) Initialwert:  int i = 0;     EINMAL

b) Bedingung:    i < 10:        Als ZWEITES ...

c) Schleifenindex ändern:  i = i + 1

TO DO:

for: Genauer im Ablauf erklären !!!

Weiterarbeit mit Arrays.

Pause:  

Aktive Pause // Passive Pause:


